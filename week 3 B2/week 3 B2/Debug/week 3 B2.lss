
week 3 B2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000244  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000002b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d30  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a62  00000000  00000000  000010cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000052f  00000000  00000000  00001b2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f0  00000000  00000000  00002060  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e8  00000000  00000000  00002150  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000331  00000000  00000000  00002638  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002969  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	97 c0       	rjmp	.+302    	; 0x154 <__vector_9>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	75 d0       	rcall	.+234    	; 0x194 <main>
  aa:	ca c0       	rjmp	.+404    	; 0x240 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <lcd_strobe_lcd_e>:
void lcd_command(unsigned char dat);
void lcd_write_cmd(unsigned char byte);

void lcd_strobe_lcd_e(void)
{
	PORTC |= (1<<LCD_E);	// E high
  ae:	ab 9a       	sbi	0x15, 3	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	8f ec       	ldi	r24, 0xCF	; 207
  b2:	97 e0       	ldi	r25, 0x07	; 7
  b4:	01 97       	sbiw	r24, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <lcd_strobe_lcd_e+0x6>
  b8:	00 c0       	rjmp	.+0      	; 0xba <lcd_strobe_lcd_e+0xc>
  ba:	00 00       	nop
	_delay_ms(1);
	PORTC &= ~(1<<LCD_E);  	// E low
  bc:	ab 98       	cbi	0x15, 3	; 21
  be:	8f ec       	ldi	r24, 0xCF	; 207
  c0:	97 e0       	ldi	r25, 0x07	; 7
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <lcd_strobe_lcd_e+0x14>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <lcd_strobe_lcd_e+0x1a>
  c8:	00 00       	nop
  ca:	08 95       	ret

000000cc <lcd_write_data>:
	}
}

/* Write a single character to the LCD */
void lcd_write_data(unsigned char byte)
{
  cc:	cf 93       	push	r28
  ce:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
  d0:	85 bb       	out	0x15, r24	; 21
	PORTC |= (1<<LCD_RS);
  d2:	aa 9a       	sbi	0x15, 2	; 21
	lcd_strobe_lcd_e();
  d4:	ec df       	rcall	.-40     	; 0xae <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
  d6:	c2 95       	swap	r28
  d8:	c0 7f       	andi	r28, 0xF0	; 240
  da:	c5 bb       	out	0x15, r28	; 21
	PORTC |= (1<<LCD_RS);
	lcd_strobe_lcd_e();
  dc:	aa 9a       	sbi	0x15, 2	; 21
  de:	e7 df       	rcall	.-50     	; 0xae <lcd_strobe_lcd_e>
}
  e0:	cf 91       	pop	r28
  e2:	08 95       	ret

000000e4 <lcd_display_text>:
	lcd_command( 0x80 );
}

/* Write a string of text to the LCD */
void lcd_display_text(char *str)
{
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	ec 01       	movw	r28, r24
	for(;*str; str++){
  ea:	88 81       	ld	r24, Y
  ec:	88 23       	and	r24, r24
  ee:	29 f0       	breq	.+10     	; 0xfa <lcd_display_text+0x16>
  f0:	21 96       	adiw	r28, 0x01	; 1
		lcd_write_data(*str);
  f2:	ec df       	rcall	.-40     	; 0xcc <lcd_write_data>
}

/* Write a string of text to the LCD */
void lcd_display_text(char *str)
{
	for(;*str; str++){
  f4:	89 91       	ld	r24, Y+
  f6:	81 11       	cpse	r24, r1
  f8:	fc cf       	rjmp	.-8      	; 0xf2 <lcd_display_text+0xe>
		lcd_write_data(*str);
	}
}
  fa:	df 91       	pop	r29
  fc:	cf 91       	pop	r28
  fe:	08 95       	ret

00000100 <lcd_command>:
}

/* Write commands to the LCD */
void lcd_command ( unsigned char dat )
{
	PORTC = dat & 0xF0;			// hoge nibble
 100:	98 2f       	mov	r25, r24
 102:	90 7f       	andi	r25, 0xF0	; 240
 104:	95 bb       	out	0x15, r25	; 21
	PORTC = PORTC | 0x08;		// data (RS=0),
 106:	ab 9a       	sbi	0x15, 3	; 21
 108:	ef ec       	ldi	r30, 0xCF	; 207
 10a:	f7 e0       	ldi	r31, 0x07	; 7
 10c:	31 97       	sbiw	r30, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <lcd_command+0xc>
 110:	00 c0       	rjmp	.+0      	; 0x112 <lcd_command+0x12>
 112:	00 00       	nop
	
	// start (EN=1)
	_delay_ms(1);				// wait 1 ms
	PORTC = 0x04;				// stop (EN = 0)
 114:	94 e0       	ldi	r25, 0x04	; 4
 116:	95 bb       	out	0x15, r25	; 21
	PORTC = (dat & 0x0F) << 4;	// lage nibble
 118:	f0 e1       	ldi	r31, 0x10	; 16
 11a:	8f 9f       	mul	r24, r31
 11c:	c0 01       	movw	r24, r0
 11e:	11 24       	eor	r1, r1
 120:	85 bb       	out	0x15, r24	; 21
	PORTC = PORTC | 0x08;		// data (RS=0),
 122:	ab 9a       	sbi	0x15, 3	; 21
 124:	8f ec       	ldi	r24, 0xCF	; 207
 126:	97 e0       	ldi	r25, 0x07	; 7
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <lcd_command+0x28>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <lcd_command+0x2e>
 12e:	00 00       	nop
	
	// start (EN=1)
	_delay_ms(1);				// wait 1 ms
	PORTC = 0x00;				// stop
 130:	15 ba       	out	0x15, r1	; 21
 132:	08 95       	ret

00000134 <lcd_init>:

/* Initlializes the LCD */
void lcd_init(void)
{
	// Set ALL pins on PORTC to output
	DDRC = 0xFF;
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	84 bb       	out	0x14, r24	; 20
	// return home (cursor to top left)
	lcd_command( 0x02 );
 138:	82 e0       	ldi	r24, 0x02	; 2
 13a:	e2 df       	rcall	.-60     	; 0x100 <lcd_command>
	// mode: 4 bits interface data, 2 lines, 5x8 dots
	lcd_command( 0x28 );
 13c:	88 e2       	ldi	r24, 0x28	; 40
 13e:	e0 df       	rcall	.-64     	; 0x100 <lcd_command>
	// display: on, cursor off, blinking off
	lcd_command( 0x0C );
 140:	8c e0       	ldi	r24, 0x0C	; 12
 142:	de df       	rcall	.-68     	; 0x100 <lcd_command>
	// entry mode: cursor to right, no shift
	lcd_command( 0x06 );
 144:	86 e0       	ldi	r24, 0x06	; 6
 146:	dc df       	rcall	.-72     	; 0x100 <lcd_command>
	// RAM adress: 0, first position, line 1
	lcd_command( 0x80 );
 148:	80 e8       	ldi	r24, 0x80	; 128
 14a:	da cf       	rjmp	.-76     	; 0x100 <lcd_command>
 14c:	08 95       	ret

0000014e <lcd_set_cursor>:
 14e:	80 68       	ori	r24, 0x80	; 128
	PORTC = 0x00;				// stop
	// (EN=0 RS=0)
}
void lcd_set_cursor(int position)
{
	lcd_command(0x80 | position);
 150:	d7 cf       	rjmp	.-82     	; 0x100 <lcd_command>
 152:	08 95       	ret

00000154 <__vector_9>:

int amountOfTimesPressed;

// Interrupt routine timer2 overflow
ISR( TIMER2_COMP_vect )
{
 154:	1f 92       	push	r1
 156:	0f 92       	push	r0
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	0f 92       	push	r0
 15c:	11 24       	eor	r1, r1
 15e:	8f 93       	push	r24
 160:	9f 93       	push	r25
	amountOfTimesPressed++; // Increment counter
 162:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 166:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 16a:	01 96       	adiw	r24, 0x01	; 1
 16c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 170:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 174:	9f 91       	pop	r25
 176:	8f 91       	pop	r24
 178:	0f 90       	pop	r0
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	0f 90       	pop	r0
 17e:	1f 90       	pop	r1
 180:	18 95       	reti

00000182 <timer2Init>:

// Initialize timer2
//
void timer2Init( void )
{
	OCR2 = CompareValue; // Compare value of counter 2
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	83 bd       	out	0x23, r24	; 35
	TIMSK |= 1<<7;		// T2 compare match interrupt enable
 186:	87 b7       	in	r24, 0x37	; 55
 188:	80 68       	ori	r24, 0x80	; 128
 18a:	87 bf       	out	0x37, r24	; 55
	TCCR2 = 0b00011111; // Initialize T2: ext.counting, rising edge
 18c:	8f e1       	ldi	r24, 0x1F	; 31
 18e:	85 bd       	out	0x25, r24	; 37
	// compare output mode, CTC, RUN
	sei();				// turn_on intr all
 190:	78 94       	sei
 192:	08 95       	ret

00000194 <main>:
	amountOfTimesPressed++; // Increment counter
}

// Main program: Counting on T2
int main( void )
{
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
 198:	cd b7       	in	r28, 0x3d	; 61
 19a:	de b7       	in	r29, 0x3e	; 62
 19c:	2a 97       	sbiw	r28, 0x0a	; 10
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	f8 94       	cli
 1a2:	de bf       	out	0x3e, r29	; 62
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	cd bf       	out	0x3d, r28	; 61
	DDRD &= ~(1<<7); // set PORTD.7 for input
 1a8:	8f 98       	cbi	0x11, 7	; 17
	DDRA = 0xFF; // set PORTB for output (shows tenth value)
 1aa:	8f ef       	ldi	r24, 0xFF	; 255
 1ac:	8a bb       	out	0x1a, r24	; 26
	timer2Init();
 1ae:	e9 df       	rcall	.-46     	; 0x182 <timer2Init>
	lcd_init();
 1b0:	c1 df       	rcall	.-126    	; 0x134 <lcd_init>
 1b2:	80 e0       	ldi	r24, 0x00	; 0
	
	while (1)
	{
		char buffer[10];
		lcd_set_cursor(0x0);
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	cb df       	rcall	.-106    	; 0x14e <lcd_set_cursor>
 1b8:	4a e0       	ldi	r20, 0x0A	; 10
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1ba:	be 01       	movw	r22, r28
 1bc:	6f 5f       	subi	r22, 0xFF	; 255
 1be:	7f 4f       	sbci	r23, 0xFF	; 255
 1c0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1c4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1c8:	08 d0       	rcall	.+16     	; 0x1da <__itoa_ncheck>
		lcd_display_text(itoa(amountOfTimesPressed, buffer, 10));	//Convert counter to string and send it to
 1ca:	8c df       	rcall	.-232    	; 0xe4 <lcd_display_text>
 1cc:	8f e1       	ldi	r24, 0x1F	; 31
 1ce:	9e e4       	ldi	r25, 0x4E	; 78
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <main+0x3c>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <main+0x42>
 1d6:	00 00       	nop
 1d8:	ec cf       	rjmp	.-40     	; 0x1b2 <main+0x1e>

000001da <__itoa_ncheck>:
 1da:	bb 27       	eor	r27, r27
 1dc:	4a 30       	cpi	r20, 0x0A	; 10
 1de:	31 f4       	brne	.+12     	; 0x1ec <__itoa_ncheck+0x12>
 1e0:	99 23       	and	r25, r25
 1e2:	22 f4       	brpl	.+8      	; 0x1ec <__itoa_ncheck+0x12>
 1e4:	bd e2       	ldi	r27, 0x2D	; 45
 1e6:	90 95       	com	r25
 1e8:	81 95       	neg	r24
 1ea:	9f 4f       	sbci	r25, 0xFF	; 255
 1ec:	01 c0       	rjmp	.+2      	; 0x1f0 <__utoa_common>

000001ee <__utoa_ncheck>:
 1ee:	bb 27       	eor	r27, r27

000001f0 <__utoa_common>:
 1f0:	fb 01       	movw	r30, r22
 1f2:	55 27       	eor	r21, r21
 1f4:	aa 27       	eor	r26, r26
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	aa 1f       	adc	r26, r26
 1fc:	a4 17       	cp	r26, r20
 1fe:	10 f0       	brcs	.+4      	; 0x204 <__utoa_common+0x14>
 200:	a4 1b       	sub	r26, r20
 202:	83 95       	inc	r24
 204:	50 51       	subi	r21, 0x10	; 16
 206:	b9 f7       	brne	.-18     	; 0x1f6 <__utoa_common+0x6>
 208:	a0 5d       	subi	r26, 0xD0	; 208
 20a:	aa 33       	cpi	r26, 0x3A	; 58
 20c:	08 f0       	brcs	.+2      	; 0x210 <__utoa_common+0x20>
 20e:	a9 5d       	subi	r26, 0xD9	; 217
 210:	a1 93       	st	Z+, r26
 212:	00 97       	sbiw	r24, 0x00	; 0
 214:	79 f7       	brne	.-34     	; 0x1f4 <__utoa_common+0x4>
 216:	b1 11       	cpse	r27, r1
 218:	b1 93       	st	Z+, r27
 21a:	11 92       	st	Z+, r1
 21c:	cb 01       	movw	r24, r22
 21e:	00 c0       	rjmp	.+0      	; 0x220 <strrev>

00000220 <strrev>:
 220:	dc 01       	movw	r26, r24
 222:	fc 01       	movw	r30, r24
 224:	67 2f       	mov	r22, r23
 226:	71 91       	ld	r23, Z+
 228:	77 23       	and	r23, r23
 22a:	e1 f7       	brne	.-8      	; 0x224 <strrev+0x4>
 22c:	32 97       	sbiw	r30, 0x02	; 2
 22e:	04 c0       	rjmp	.+8      	; 0x238 <strrev+0x18>
 230:	7c 91       	ld	r23, X
 232:	6d 93       	st	X+, r22
 234:	70 83       	st	Z, r23
 236:	62 91       	ld	r22, -Z
 238:	ae 17       	cp	r26, r30
 23a:	bf 07       	cpc	r27, r31
 23c:	c8 f3       	brcs	.-14     	; 0x230 <strrev+0x10>
 23e:	08 95       	ret

00000240 <_exit>:
 240:	f8 94       	cli

00000242 <__stop_program>:
 242:	ff cf       	rjmp	.-2      	; 0x242 <__stop_program>
