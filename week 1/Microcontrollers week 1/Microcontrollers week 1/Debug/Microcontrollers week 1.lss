
Microcontrollers week 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00000168  000001dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000168  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001fa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b06  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008d7  00000000  00000000  00000dc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000415  00000000  00000000  0000169d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  00001ab4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004d6  00000000  00000000  00001b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000017e  00000000  00000000  00002042  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000021c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e6       	ldi	r30, 0x68	; 104
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 31       	cpi	r26, 0x1E	; 30
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	57 d0       	rcall	.+174    	; 0x162 <main>
  b4:	57 c0       	rjmp	.+174    	; 0x164 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <wait>:
	
	while (1)
	{
		PORTD = 1 << i%8;
		i++;
		wait(50);
  b8:	18 16       	cp	r1, r24
  ba:	19 06       	cpc	r1, r25
  bc:	6c f4       	brge	.+26     	; 0xd8 <wait+0x20>
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	ef ec       	ldi	r30, 0xCF	; 207
  c4:	f7 e0       	ldi	r31, 0x07	; 7
  c6:	31 97       	sbiw	r30, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <wait+0xe>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <wait+0x14>
  cc:	00 00       	nop
  ce:	2f 5f       	subi	r18, 0xFF	; 255
  d0:	3f 4f       	sbci	r19, 0xFF	; 255
  d2:	82 17       	cp	r24, r18
  d4:	93 07       	cpc	r25, r19
  d6:	a9 f7       	brne	.-22     	; 0xc2 <wait+0xa>
  d8:	08 95       	ret

000000da <displaySequence>:

	}
}

void displaySequence(short arr[], int arraySize)
{
  da:	0f 93       	push	r16
  dc:	1f 93       	push	r17
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
	for(int i = 0; i < arraySize; i++)
  e2:	16 16       	cp	r1, r22
  e4:	17 06       	cpc	r1, r23
  e6:	7c f4       	brge	.+30     	; 0x106 <displaySequence+0x2c>
  e8:	8c 01       	movw	r16, r24
  ea:	ec 01       	movw	r28, r24
  ec:	66 0f       	add	r22, r22
  ee:	77 1f       	adc	r23, r23
  f0:	06 0f       	add	r16, r22
  f2:	17 1f       	adc	r17, r23
	{
		PORTD = arr[i];
  f4:	98 81       	ld	r25, Y
  f6:	22 96       	adiw	r28, 0x02	; 2
  f8:	92 bb       	out	0x12, r25	; 18
		wait( 200 );
  fa:	88 ec       	ldi	r24, 0xC8	; 200
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	dc df       	rcall	.-72     	; 0xb8 <wait>
	}
}

void displaySequence(short arr[], int arraySize)
{
	for(int i = 0; i < arraySize; i++)
 100:	c0 17       	cp	r28, r16
 102:	d1 07       	cpc	r29, r17
 104:	b9 f7       	brne	.-18     	; 0xf4 <displaySequence+0x1a>
	{
		PORTD = arr[i];
		wait( 200 );
	}
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	1f 91       	pop	r17
 10c:	0f 91       	pop	r16
 10e:	08 95       	ret

00000110 <LedPatterns>:
		wait(50);
	}
}

void LedPatterns(void)
{
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	cd b7       	in	r28, 0x3d	; 61
 116:	de b7       	in	r29, 0x3e	; 62
 118:	6e 97       	sbiw	r28, 0x1e	; 30
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	f8 94       	cli
 11e:	de bf       	out	0x3e, r29	; 62
 120:	0f be       	out	0x3f, r0	; 63
 122:	cd bf       	out	0x3d, r28	; 61
	short toCenterFromCenter[7] = {0x81, 0x42, 0x24, 0x18, 0x24, 0x42, 0x81};
 124:	8e e0       	ldi	r24, 0x0E	; 14
 126:	e0 e0       	ldi	r30, 0x00	; 0
 128:	f1 e0       	ldi	r31, 0x01	; 1
 12a:	de 01       	movw	r26, r28
 12c:	11 96       	adiw	r26, 0x01	; 1
 12e:	01 90       	ld	r0, Z+
 130:	0d 92       	st	X+, r0
 132:	8a 95       	dec	r24
 134:	e1 f7       	brne	.-8      	; 0x12e <LedPatterns+0x1e>
	short ledsWalking[8] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80};
 136:	80 e1       	ldi	r24, 0x10	; 16
 138:	ee e0       	ldi	r30, 0x0E	; 14
 13a:	f1 e0       	ldi	r31, 0x01	; 1
 13c:	de 01       	movw	r26, r28
 13e:	1f 96       	adiw	r26, 0x0f	; 15
 140:	01 90       	ld	r0, Z+
 142:	0d 92       	st	X+, r0
 144:	8a 95       	dec	r24
 146:	e1 f7       	brne	.-8      	; 0x140 <LedPatterns+0x30>

	DDRD = 0b11111111;	//ALL pins PORTD are set to output
 148:	8f ef       	ldi	r24, 0xFF	; 255
 14a:	81 bb       	out	0x11, r24	; 17

	while(1)
	{
		displaySequence(toCenterFromCenter, 7);
 14c:	67 e0       	ldi	r22, 0x07	; 7
 14e:	70 e0       	ldi	r23, 0x00	; 0
 150:	ce 01       	movw	r24, r28
 152:	01 96       	adiw	r24, 0x01	; 1
 154:	c2 df       	rcall	.-124    	; 0xda <displaySequence>
		displaySequence(ledsWalking, 8);
 156:	68 e0       	ldi	r22, 0x08	; 8
 158:	70 e0       	ldi	r23, 0x00	; 0
 15a:	ce 01       	movw	r24, r28
 15c:	0f 96       	adiw	r24, 0x0f	; 15
 15e:	bd df       	rcall	.-134    	; 0xda <displaySequence>
 160:	f5 cf       	rjmp	.-22     	; 0x14c <LedPatterns+0x3c>

00000162 <main>:
{
		//blinkingstrip();
		//blinkingseperate();
		//OnClickButton();
		//WalkingLight();
		LedPatterns();
 162:	d6 df       	rcall	.-84     	; 0x110 <LedPatterns>

00000164 <_exit>:
 164:	f8 94       	cli

00000166 <__stop_program>:
 166:	ff cf       	rjmp	.-2      	; 0x166 <__stop_program>
